Міністерство освіти і науки України
Харківський національний університет радіоелектроніки



Кафедра ПІ




Звіт з практичної роботи №1
з дисципліни «Архітектура програмного забезпечення»




 
Виконав:
ст. гр. ПЗПІ-22-8
Шапаренко Артем Васильович
Перевірив:
ст. викладач каф. ПІ
Сокорчук Ігор Петрович 







Харків 2025  
1	Історія змін

Розділ призначений для відображення історії внесення змін, що наведено на табл.1:

Таблиця 1 – Історія змін
№	Дата	Версія	Опис змін	Автор
1	31.03.2025	0.1	Створено розділ «Завдання»	Шапаренко Артем
2	31.03.2025	0.1	Створено розділ «Опис виконаної роботи»	Шапаренко Артем
3	31.03.2025	0.1	Створено розділ «Висновки»	Шапаренко Артем
4	31.03.2025	0.1	Додано слайди презентації до додатку Б	Шапаренко Артем
5	31.03.2025	0.1	Додано програмний код до Додатку В	Шапаренко Артем
6	01.04.2025	0.1	Додано посилання на відеозапис та його хронологічний опис до додатку А	Шапаренко Артем

2	ЗАВДАННЯ

У рамках практичної роботи необхідно було дослідити та вивчити патерн проєктування "Шаблонний метод" (Template Method). Завдання включало в себе аналіз структури та принципів роботи даного патерну, визначення його місця в класифікації патернів проєктування, а також вивчення механізму його реалізації на прикладі коду.
Додатково, необхідно було проаналізувати застосування патерну в реальних програмних рішеннях, визначити його переваги та недоліки, а також розглянути можливі альтернативи.

3	ОПИС ВИКОНАНОЇ РОБОТИ

У процесі виконання роботи було детально досліджено патерн "Шаблонний метод". Даний патерн належить до класу поведінкових патернів проєктування та забезпечує механізм побудови гнучкого алгоритму, який дозволяє підкласам змінювати певні кроки його виконання без порушення загальної структури.

3.1.	Сутність патерну "Шаблонний метод"

Патерн "Шаблонний метод" дозволяє визначити скелет алгоритму в межах абстрактного класу, делегуючи конкретну реалізацію окремих його частин підкласам. Це дозволяє уникати дублювання коду та забезпечує принцип інверсії управління, коли базовий клас визначає послідовність дій, але не знає деталей реалізації кожного з кроків.

3.2.	 Структура патерну

Структура "Шаблонного методу" складається з таких основних компонентів:
	AbstractClass – абстрактний клас, що містить шаблонний метод, який визначає алгоритм і його основні етапи.
	ConcreteClass – конкретний підклас, який реалізує змінювані частини алгоритму, наслідуючи абстрактний клас.

3.3.	 Принцип роботи патерну

Визначається абстрактний клас із загальним методом (шаблонним методом), який встановлює структуру алгоритму.
Деякі методи в цьому класі залишаються абстрактними – вони повинні бути реалізовані у підкласах.
Користувач використовує об'єкти підкласів, які виконують конкретну реалізацію окремих кроків алгоритму, але при цьому слідують загальній логіці, закладеній у базовому класі.

3.4.	 Застосовність

Патерн "Шаблонний метод" доцільно використовувати у таких випадках:
	Коли необхідно забезпечити єдину послідовність кроків алгоритму, дозволяючи підкласам змінювати лише деякі його частини.
	Коли необхідно уникнути дублювання коду в кількох підкласах шляхом узагальнення загальної логіки в одному місці.
	Коли потрібно підтримувати принцип інверсії управління, забезпечуючи підкласам можливість реалізовувати певні кроки без зміни базового класу.

3.5.	 Переваги та недоліки

Переваги:
	Сприяє повторному використанню коду, оскільки спільна логіка визначається в одному місці.
	Дотримується принципу відкритості/закритості, оскільки дозволяє змінювати поведінку алгоритму без зміни його структури.
	Полегшує підтримку та розширення програмного коду.

Недоліки:
	Може призводити до ускладнення ієрархії класів, особливо якщо підкласів багато.
	Вимагає ретельного проектування, щоб правильно виділити незмінні та змінні частини алгоритму.

3.6.	 Реалізація патерну на Java

Було розроблено приклад реалізації патерну "Шаблонний метод" мовою Java. Приклад демонструє створення системи обробки даних, з різних форматів файлів, де базовий клас визначає загальну логіку процесу обробки, а конкретні класи реалізують методи отримання даних для окремого типу файлу.

4	ВИСНОВКИ

У ході виконання роботи було детально розглянуто патерн "Шаблонний метод", його структуру, принципи роботи та застосовність у різних програмних рішеннях. Даний патерн дозволяє створювати гнучкі, добре структуровані алгоритми, що забезпечують перевикористання коду та зменшення дублювання логіки.
Основна перевага "Шаблонного методу" полягає в можливості визначати скелет алгоритму в базовому класі та делегувати окремі його кроки підкласам. Це забезпечує дотримання принципів SOLID, що робить систему більш масштабованою.
Практичний приклад реалізації патерну на мові Java продемонстрував, як "Шаблонний метод" дозволяє стандартизувати послідовність дій у програмі, забезпечуючи можливість легкої адаптації алгоритму для різних сценаріїв використання.
 
ДОДАТОК А
Посилання на відеозапис доповіді та текст хронологічного опису доповіді

Відеозапис доповіді на YouTube: https://youtu.be/k8BuOINY6i8 

00:00 Представлення теми доповіді. Патерн проєктування "Template method"
00:24 Призначення патерну, його сутність
00:51 Проблеми, які вирішує патерн. Ситуації, в яких необхідно використовувати метод
02:43 Покрокове вирішення проблем за допомогою патерну
05:00 Прадставлення струкрути патерну. Основа написання классів шаблонним методом
06:35 Демонстрація прикладу, в якому використовується шаблонний метод проєктування
07:26 Ситуації, в яких необхідно використовувати патерн
07:56 Переваги та недоліки використання патерну
08:36 Взаємозв'язок шаблонного методу з іншими патернами проєктування
09:28 Кінець презентації. Дяка за виділений час
 
ДОДАТОК Б
Слайди презентації доповіді

 
Рисунок Б.1 – Титульний слайд презентації

 
Рисунок Б.2 – Призначення патерну

 
Рисунок Б.3 – Окреслення проблеми

 
Рисунок Б.4 – Кроки вирішення проблеми

  
Рисунок Б.5 – Визначення структури патерну

  
Рисунок Б.6 – Приклад реалізації патерну


  
Рисунок Б.7 – Умови для використання патерну

  
Рисунок Б.8 – Переваги та недоліки використання патерну


 
Рисунок Б.9 – Взаємозв’язок патерну з іншими патернами 

 
Рисунок Б.10 – Останній слайд  
ДОДАТОК В
Приклади програмного коду

1   abstract class DataMiner {
2       public final void mine() {
3           openFile();
4           extractData();
5           processData();
6           closeFile();
7       }
8       abstract void openFile();
9       abstract void extractData();
10      void processData() {
11          System.out.println("Обробка даних...");
12      }
13      abstract void closeFile();
14  }
15
16  class PdfMiner extends DataMiner {
17      void openFile() { System.out.println("Відкриття PDF-
18  файлу"); }
19      void extractData() { System.out.println("Видобування 
20  даних з PDF"); }
21      void closeFile() { System.out.println("Закриття PDF-
22  файлу"); }
23  }
24
25  class DocMiner extends DataMiner {
26      void openFile() { System.out.println("Відкриття DOC-
27  файлу"); }
28      void extractData() { System.out.println("Видобування 
29  даних з DOC"); }
30      void closeFile() { System.out.println("Закриття DOC-
31  файлу"); }
32  }
